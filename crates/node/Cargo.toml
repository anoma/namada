[package]
name = "namada_node"
description = "Namada node library code"
resolver = "2"
authors.workspace = true
edition.workspace = true
documentation.workspace = true
homepage.workspace = true
keywords.workspace = true
license.workspace = true
readme.workspace = true
repository.workspace = true
version.workspace = true
rust-version.workspace = true

[features]
default = ["migrations"]
mainnet = ["namada_sdk/mainnet"]
# for tests and test utilities
testing = [
  "namada_apps_lib/testing",
  "namada_test_utils",
  "clap",
  "lazy_static",
  "rand",
]
benches = [
  "namada_apps_lib/benches",
  "namada_test_utils",
  "tracing-subscriber",
  "rand_core",
]
jemalloc = ["rocksdb/jemalloc"]
migrations = ["namada_migrations", "namada_sdk/migrations", "linkme"]
namada-eth-bridge = ["namada_sdk/namada-eth-bridge"]

[dependencies]
namada_apps_lib.workspace = true
namada_migrations = { workspace = true, optional = true }
namada_replay_protection.workspace = true
namada_sdk = { workspace = true, default-features = true, features = [
  "wasm-runtime",
] }
namada_test_utils = { workspace = true, optional = true }
namada_vm.workspace = true
namada_vote_ext.workspace = true
namada_vp.workspace = true

arse-merkle-tree = { workspace = true, features = ["blake2b"] }
async-trait.workspace = true
base64.workspace = true
blake2b-rs.workspace = true
borsh.workspace = true
byte-unit.workspace = true
bytes.workspace = true
clap = { workspace = true, default-features = true, optional = true }
color-eyre.workspace = true
data-encoding.workspace = true
drain_filter_polyfill.workspace = true
either.workspace = true
ethabi.workspace = true
ethbridge-bridge-events.workspace = true
ethbridge-events.workspace = true
eyre.workspace = true
futures.workspace = true
itertools.workspace = true
kassandra-client.workspace = true
lazy_static = { workspace = true, optional = true }
linkme = { workspace = true, optional = true }
masp_primitives = { workspace = true, features = ["transparent-inputs"] }
masp_proofs = { workspace = true, features = [
  "bundled-prover",
  "download-params",
] }
num_cpus.workspace = true
num256.workspace = true
num-rational.workspace = true
num-traits.workspace = true
once_cell.workspace = true
prost.workspace = true
rand = { workspace = true, features = ["std"], optional = true }
rand_core = { workspace = true, optional = true, features = ["std"] }
rayon.workspace = true
regex.workspace = true
rlimit.workspace = true
rocksdb.workspace = true
serde_json = { workspace = true, features = ["raw_value"] }
sha2.workspace = true
smooth-operator.workspace = true
sysinfo.workspace = true
tar.workspace = true
tempfile.workspace = true
thiserror.workspace = true
tokio = { workspace = true, features = ["full"] }
toml.workspace = true
tower-abci.workspace = true
tower.workspace = true
tracing-subscriber = { workspace = true, optional = true, features = [
  "std",
  "json",
  "ansi",
  "tracing-log",
] }
tracing.workspace = true
warp.workspace = true
zstd.workspace = true

[dev-dependencies]
namada_apps_lib = { path = "../apps_lib", features = ["testing"] }
namada_test_utils.path = "../test_utils"
namada_vm = { path = "../vm", default-features = true, features = ["testing"] }

assert_matches.workspace = true
clap.workspace = true
lazy_static.workspace = true
proptest.workspace = true
rand = { workspace = true, features = ["std"] }
test-log.workspace = true
tokio-test.workspace = true

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(fuzzing)'] }
