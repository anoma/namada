[package]
name = "namada_sdk"
description = "The main Namada SDK crate"
resolver = "2"
authors.workspace = true
edition.workspace = true
documentation.workspace = true
homepage.workspace = true
keywords.workspace = true
license.workspace = true
readme.workspace = true
repository.workspace = true
version.workspace = true

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[features]
default = ["std"]
mainnet = ["namada_core/mainnet", "namada_events/mainnet"]
multicore = ["masp_proofs/multicore", "namada_token/multicore"]
std = ["fd-lock", "download-params"]
async-send = []
namada-eth-bridge = ["namada_ethereum_bridge/namada-eth-bridge"]
benches = ["namada_core/benches", "namada_core/testing", "namada_state/benches"]
wasm-runtime = ["namada_vm/wasm-runtime"]

# for integration tests and test utilities
testing = [
  "masp_primitives/test-dependencies",
  "namada_account/testing",
  "namada_core/testing",
  "namada_ethereum_bridge/testing",
  "namada_governance/testing",
  "namada_ibc/testing",
  "namada_parameters/testing",
  "namada_proof_of_stake/testing",
  "namada_storage/testing",
  "namada_token/testing",
  "namada_tx/testing",
  "proptest",
  "jubjub",
]
arbitrary = [
  "dep:arbitrary",
  "namada_account/arbitrary",
  "namada_core/arbitrary",
  "namada_governance/arbitrary",
  "namada_ibc/arbitrary",
  "namada_token/arbitrary",
]

download-params = ["namada_token/download-params"]
migrations = [
  "namada_migrations",
  "namada_account/migrations",
  "namada_core/migrations",
  "namada_ethereum_bridge/migrations",
  "namada_events/migrations",
  "namada_governance/migrations",
  "namada_proof_of_stake/migrations",
  "namada_state/migrations",
  "namada_storage/migrations",
  "namada_tx/migrations",
  "namada_vote_ext/migrations",
  "namada_gas/migrations",
  "linkme",
]

[dependencies]
namada_account = { path = "../account" }
namada_core = { path = "../core", features = ["control_flow", "rand"] }
namada_ethereum_bridge = { path = "../ethereum_bridge", default-features = false }
namada_events = { path = "../events" }
namada_gas = { path = "../gas" }
namada_governance = { path = "../governance" }
namada_ibc = { path = "../ibc" }
namada_macros = { path = "../macros" }
namada_migrations = { path = "../migrations", optional = true }
namada_parameters = { path = "../parameters" }
namada_proof_of_stake = { path = "../proof_of_stake" }
namada_state = { path = "../state" }
namada_storage = { path = "../storage" }
namada_token = { path = "../token" }
namada_tx = { path = "../tx" }
namada_vm = { path = "../vm", default-features = false }
namada_vote_ext = { path = "../vote_ext" }
namada_vp = { path = "../vp" }

arbitrary = { workspace = true, optional = true }
async-trait.workspace = true
bimap.workspace = true
borsh.workspace = true
borsh-ext.workspace = true
circular-queue.workspace = true
clap = { version = "4.3", default-features = false, features = ["std"] }
data-encoding.workspace = true
derivation-path.workspace = true
duration-str.workspace = true
either.workspace = true
ethbridge-bridge-contract.workspace = true
ethers.workspace = true
eyre.workspace = true
fd-lock = { workspace = true, optional = true }
flume.workspace = true
futures.workspace = true
init-once.workspace = true
itertools.workspace = true
jubjub = { workspace = true, optional = true }
lazy_static.workspace = true
linkme = {workspace = true, optional = true}
masp_primitives.workspace = true
masp_proofs.workspace = true
num256.workspace = true
num-traits.workspace = true
orion.workspace = true
owo-colors.workspace = true
paste.workspace = true
patricia_tree.workspace = true
proptest = { workspace = true, optional = true }
prost.workspace = true
rand.workspace = true
rand_core.workspace = true
regex.workspace = true
serde.workspace = true
serde_json.workspace = true
sha2.workspace = true
slip10_ed25519.workspace = true
smooth-operator.workspace = true
tendermint-rpc.workspace = true
thiserror.workspace = true
tiny-bip39.workspace = true
tiny-hderive.workspace = true
toml.workspace = true
tracing.workspace = true
typed-builder.workspace = true
zeroize.workspace = true

[target.'cfg(not(target_family = "wasm"))'.dependencies]
kdam.workspace = true
rayon.workspace = true
reqwest.workspace = true
tempfile.workspace = true
tokio = { workspace = true, features = ["full"] }
xorf.workspace = true

[target.'cfg(target_family = "wasm")'.dependencies]
tokio = { workspace = true, default-features = false, features = ["sync"] }

[dev-dependencies]
namada_account = { path = "../account", features = ["testing"]}
namada_core = { path = "../core", default-features = false, features = [
  "rand",
  "testing",
] }
namada_ethereum_bridge = { path = "../ethereum_bridge", default-features = false, features = [
  "testing",
] }
namada_governance = { path = "../governance", features = ["testing"] }
namada_ibc = { path = "../ibc", features = ["testing"] }
namada_parameters = {path = "../parameters"}
namada_proof_of_stake = { path = "../proof_of_stake", default-features = false, features = [
  "testing",
] }
namada_state = { path = "../state", features = ["testing"] }
namada_storage = { path = "../storage", features = ["testing"] }
namada_test_utils = { path = "../test_utils" }
namada_token = { path = "../token", features = ["testing"] }
namada_tx = { path = "../tx", features = ["testing"]}
namada_vm = { path = "../vm" }
namada_vote_ext = { path = "../vote_ext" }
namada_vp = { path = "../vp" }

assert_matches.workspace = true
base58.workspace = true
jubjub.workspace = true
masp_primitives = { workspace = true, features = ["test-dependencies"] }
proptest.workspace = true
tempfile.workspace = true
